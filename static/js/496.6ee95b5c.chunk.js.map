{"version":3,"file":"static/js/496.6ee95b5c.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/Profile.module.css?b512","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Posts/Post.tsx","components/Profile/Posts/MyPosts.tsx","components/Profile/Posts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Profile_content__g-Lde\",\"avatar\":\"Profile_avatar__NzF5E\",\"ava\":\"Profile_ava__M5bEO\",\"imageLike\":\"Profile_imageLike__R754K\",\"likeDislike\":\"Profile_likeDislike__ZgUnB\",\"mainPhoto\":\"Profile_mainPhoto__WIoKW\",\"contact\":\"Profile_contact__sTRj5\"};","import React, {ChangeEvent, FC, useEffect, useState} from \"react\";\n\ntype ProfileStatusType = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\nexport const ProfileStatusWithHooks: FC<ProfileStatusType> = (props) => {\n\n    const [editMode, setEditMode] = useState(false)\n    const [status, setStatus] = useState(props.status)\n\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props])\n\n    const activateEditMode = () => {\n        setEditMode(true)\n    }\n    const deactivateEditMode = () => {\n        setEditMode(false)\n        props.updateStatus(status)\n    }\n    const onChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value)\n    }\n\n    return (\n        <div>\n            {!editMode &&\n                <div>\n                    <b>Status: </b><span onDoubleClick={activateEditMode}>{props.status || \"------\"}</span>\n                </div>\n            }\n            {editMode &&\n                <div>\n                    <input onChange={onChangeStatus} onBlur={deactivateEditMode} autoFocus value={status}/>\n                </div>\n            }\n        </div>\n    )\n}\n\n","import React from \"react\";\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\nimport {createField, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\nimport s from \"../Profile.module.css\"\n\nconst ProfileDataForm = (props: InjectedFormProps<any>) => {\n\n    return <form onSubmit={props.handleSubmit}>\n        <div><button>save</button></div>\n        <div>\n            <b>Full name: </b> {createField('Full name', 'fullName', [], Input)}\n        </div>\n        <div>\n            <b>Looking for a job: </b> {createField('', 'lookingForAJob', [], Input, {type: 'checkbox'})}\n        </div>\n            <div>\n                <b>My professional skills: </b> {createField('My professional skills', 'lookingForAJobDescription', [], Textarea)}\n            </div>\n        <div>\n            <b>About me: </b> {createField('About me', 'aboutMe', [], Textarea)}\n        </div>\n        {/*<div>*/}\n        {/*    <b>Contacts: </b> {Object.keys(props.profile.contacts).map(key => {*/}\n        {/*    return <div className={s.contact}>*/}\n        {/*        <b>{key}: {createField(key, 'contacts.' + key, [], Input)}</b>*/}\n        {/*    </div>*/}\n        {/*})}*/}\n        {/*</div>*/}\n    </form>\n}\n\nconst ProfileDataFormReduxForm = reduxForm({form: 'edit-profile'})(ProfileDataForm)\n\nexport default ProfileDataFormReduxForm","import React, {useState} from \"react\";\nimport preloader from \"../../../assets/images/Rocket.gif\"\nimport {ProfileType} from \"../ProfileContainer\";\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\nimport userPhoto from \"../../../assets/images/user.png\";\nimport s from \"../Profile.module.css\"\nimport ProfileDataForm from \"./ProfileDataForm\";\n\ntype ProfileInfoType = {\n    profile: ProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (file: any) => void\n    saveProfile: (formData: any) => void\n}\n\nexport const ProfileInfo = (props: ProfileInfoType) => {\n    const [editMode, setEditMode] = useState(false)\n\n    const onMainPhotoSelected = (e: any) => {\n        if (e.target.files.length) {\n            props.savePhoto(e.target.files[0])\n        }\n    }\n\n    const onSubmit = (formData: any) => {\n        props.saveProfile(formData)\n        setEditMode(false)\n    }\n\n    if (!props.profile) {\n        return <img src={preloader}/>\n    }\n    return (\n        <div>\n            <div>\n                <img className={s.mainPhoto} src={props.profile.photos.large || userPhoto}/>\n                {props.isOwner && <input type=\"file\" onChange={onMainPhotoSelected}/>}\n\n                {editMode\n                    ? <ProfileDataForm\n                        initialValues={props.profile} onSubmit={onSubmit}/>\n                    : <ProfileData goToEditMode={() => {\n                        setEditMode(true)\n                    }} profile={props.profile} isOwner={props.isOwner}/>}\n\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\n            </div>\n        </div>\n    )\n}\n\nconst ProfileData = ({profile, isOwner, goToEditMode}: ProfileDataType) => {\n    return <div>\n        {isOwner && <div>\n            <button onClick={goToEditMode}>edit</button>\n        </div>}\n        <div>\n            <b>Full name: </b> {profile.fullName}\n        </div>\n        <div>\n            <b>Looking for a job: </b> {profile.lookingForAJob ? 'yes' : 'no'}\n        </div>\n        {profile.lookingForAJob &&\n            <div>\n                <b>My professional skills: </b> {profile.lookingForAJobDescription}\n            </div>\n        }\n        <div>\n            <b>About me: </b> {profile.aboutMe}\n        </div>\n        <div>\n            <b>Contacts: </b> {Object.keys(profile.contacts).map(key => {\n            return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\n        })}\n        </div>\n    </div>\n\n}\n\nconst Contact = ({contactTitle, contactValue}: ContactType) => {\n    return <div className={s.contact}><b>{contactTitle}:</b> {contactValue}</div>\n}\n\ntype ContactType = {\n    contactTitle: string\n    contactValue: string\n}\ntype ProfileDataType = {\n    profile: ProfileType\n    isOwner: boolean\n    goToEditMode: () => void\n}","import s from \"../Profile.module.css\";\nimport React from \"react\";\n\nexport type PostType = {\n    id?: string\n    imageAddress: string\n    text: string\n    like: number\n    dislike: number\n}\n\nexport const Post = (props: PostType) => {\n    return (\n        <div className={s.item}>\n            <img className={s.ava} src={props.imageAddress}/>\n            <i>{props.text}</i>\n            <div className={s.likeDislike}>\n                <img className={s.imageLike} src=\"https://cdn-icons-png.flaticon.com/128/126/126473.png\"/>\n                {props.like}\n            </div>\n            <div className={s.likeDislike}>\n                <img className={s.imageLike} src=\"https://cdn-icons-png.flaticon.com/128/126/126504.png\"/>\n                {props.dislike}\n            </div>\n        </div>\n    )\n}","import React from \"react\";\nimport s from \"../Profile.module.css\";\nimport {Post, PostType} from \"./Post\";\nimport {Field, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../Validators/validators\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\n\nexport type MyPostsType = {\n    posts: Array<PostType>\n    addPost: (value: any) => void\n}\n\nconst maxLength10 = maxLengthCreator(10)\n\n\nlet AddNewPostForm = React.memo((props: { handleSubmit: any }) => {\n    return <form onSubmit={props.handleSubmit}>\n        <div>\n            New Post\n            <Field name=\"newPostText\" component={Textarea} validate={[required, maxLength10]}/>\n        </div>\n        <div>\n            <button>send</button>\n        </div>\n    </form>\n})\n\nlet AddNewPostFormRedux = reduxForm({form: \"ProfileAddMewPostForm\"})(AddNewPostForm)\n\nexport const MyPosts = React.memo((props: MyPostsType) => {\n\n    const postsElements = props.posts.map(el => <Post key={el.id} imageAddress={el.imageAddress} text={el.text} dislike={el.dislike} like={el.like}/>)\n\n    const onAddPost = (value: any) => {\n        props.addPost(value.newPostText)\n    }\n\n    return (\n        <div>\n            My posts\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\n            <div className={s.posts}>\n                {postsElements}\n            </div>\n        </div>\n    )\n})","import React from \"react\";\nimport {\n    addPostActionCreator, InitialStateProfileType} from \"../../../Redux/profileReducer\";\nimport {MyPosts} from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {Dispatch} from \"redux\";\nimport {StoreType} from \"../../../Redux/reduxStore\";\n\n/*\nexport const MyPostsContainer = () => {\n\n    return (\n        <StoreContext.Consumer>\n            {\n            (store) => {\n\n                const addPost = () => {\n                    store.dispatch(addPostActionCreator())\n                }\n\n                const onChangeHandler = (value: string) => {\n                    store.dispatch(updateNewPostActionCreator(value))\n                }\n\n                return <MyPosts updateNewPostText={onChangeHandler}\n                                addPost={addPost}\n                                posts={store.getState().profilePage.posts}\n                                newPostText={store.getState().profilePage.newPostText}/>\n            }\n        }\n        </StoreContext.Consumer>\n    )\n}\n*/\n\ntype MapDispatchPropsType = {\n    addPost: (newPostText: string) => void\n}\n\nconst mapStateToProps = (state: StoreType): InitialStateProfileType => {\n    return {\n        posts: state.profilePage.posts,\n        profile: state.profilePage.profile,\n        status: state.profilePage.status\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\n    return {\n        addPost: (newPostText: string) => {\n            dispatch(addPostActionCreator(newPostText))\n        }\n    }\n}\n\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\n","import React from 'react';\nimport s from \"./Profile.module.css\"\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\nimport {MyPostsContainer} from \"./Posts/MyPostsContainer\";\nimport {ProfileType} from \"./ProfileContainer\";\n\ntype ProfilePropsType = {\n    profile: ProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (file: any) => void\n    saveProfile: (profile: any) => void\n}\n\nexport const Profile = (props: ProfilePropsType) => {\n    return (\n        <div className={s.content}>\n            <ProfileInfo saveProfile={props.saveProfile} isOwner={props.isOwner} savePhoto={props.savePhoto} profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\n            <MyPostsContainer/>\n        </div>\n    )\n}\n","import React from 'react';\nimport {Profile} from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {StoreType} from \"../../Redux/reduxStore\";\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../Redux/profileReducer\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\nexport type ProfileType = {\n    aboutMe: string\n    userId: number\n    lookingForAJob: boolean\n    lookingForAJobDescription: string\n    fullName: string\n    contacts: {\n        [key:string]: string\n    }\n    photos: {\n        small: string\n        large: string\n    }\n}\n\ntype MapStateToPropsType = {\n    profile: ProfileType | null\n    status: string\n    authorizedUserId: undefined | string\n    isAuth: boolean\n}\n\ntype MapDispatchToPropsType = {\n    getUserProfile: (userId: undefined | string) => void\n    getStatus: (userId: undefined | string) => void\n    updateStatus: (status: string) => void\n    savePhoto: (file: any) => void\n    saveProfile: (profile: any) => void\n}\n\ntype PathParamsType = {\n    userId: string | undefined\n}\n\ntype ProfileContainerType = RouteComponentProps<PathParamsType> & MapStateToPropsType & MapDispatchToPropsType\n\n\nclass ProfileContainer extends React.Component<ProfileContainerType> {\n    refreshProfile() {\n        let userId = this.props.match.params.userId\n        if (!userId) {\n            userId = this.props.authorizedUserId\n        }\n        this.props.getUserProfile(userId)\n        this.props.getStatus(userId)\n    }\n\n    componentDidMount() {\n        this.refreshProfile()\n    }\n\n    componentDidUpdate(prevProps: Readonly<ProfileContainerType>, prevState: Readonly<{}>, snapshot?: any) {\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\n            this.refreshProfile()\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <Profile saveProfile={this.props.saveProfile} isOwner={!this.props.match.params.userId} savePhoto={this.props.savePhoto} profile={this.props.profile} status={this.props.status}\n                         updateStatus={this.props.updateStatus}/>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state: StoreType): MapStateToPropsType => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth\n})\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\n    withRouter,\n    withAuthRedirect\n)(ProfileContainer)","import {StoreType} from \"../Redux/reduxStore\";\nimport React, {ComponentType} from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\n\ntype MapStateToPropsRedirectType = {\n    isAuth: boolean\n}\n\nconst mapStateToPropsRedirect = (state: StoreType): MapStateToPropsRedirectType => ({\n    isAuth: state.auth.isAuth\n})\n\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\n    class RedirectComponent extends React.Component<MapStateToPropsRedirectType> {\n        render() {\n            let {isAuth, ...restProps} = this.props\n            if (!isAuth) return <Redirect to={'/login'}/>\n            return <Component {...restProps as T}/>\n        }\n    }\n\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsRedirect)(RedirectComponent)\n    return ConnectedAuthRedirectComponent\n}"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","reduxForm","form","onSubmit","handleSubmit","createField","Input","type","Textarea","ProfileInfo","profile","className","s","src","photos","large","userPhoto","isOwner","target","files","length","savePhoto","initialValues","formData","saveProfile","ProfileData","goToEditMode","preloader","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Object","keys","contacts","map","key","Contact","contactTitle","contactValue","Post","imageAddress","text","like","dislike","maxLength10","maxLengthCreator","AddNewPostForm","React","Field","name","component","validate","required","AddNewPostFormRedux","MyPosts","postsElements","posts","el","id","addPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","compose","auth","isAuth","withRouter","withAuthRedirect","mapStateToPropsRedirect","Component","RedirectComponent","restProps","to"],"sourceRoot":""}
{"version":3,"file":"static/js/886.83e3071a.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Users/Users.module.css?b9d0","components/common/Paginator/Paginator.tsx","components/Users/Users.tsx","../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","Redux/usersSelectors.ts","components/Users/UsersContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"userPhoto\":\"Users_userPhoto__wCV7+\",\"pageNumber\":\"Users_pageNumber__O0W2i\",\"select\":\"Users_select__Gdjtl\"};","import {FC, useState} from \"react\";\nimport s from \"../../Users/Users.module.css\";\n\ntype PaginatorType = {\n    totalItemsCount: number\n    pageSize: number\n    currentPage: number\n    onPageChanged: (value: number) => void\n    portionSize: number\n}\n\nexport const Paginator: FC<PaginatorType> = ({totalItemsCount, pageSize, currentPage, onPageChanged, portionSize}) => {\n    let pageCount = Math.ceil(totalItemsCount / pageSize)\n\n    let pages = []\n    for (let i = 1; i <= pageCount; i++) {\n        pages.push(i)\n    }\n\n    let portionCount = Math.ceil(pageCount / portionSize)\n    let [portionNumber, setPortionNumber] = useState(1)\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\n    let rightPortionPageNumber = portionNumber * portionSize\n\n    return <div>\n        {portionNumber > 1 && <button onClick={() => {setPortionNumber((portionNumber - 1))}}>PREV</button>}\n        {pages.filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\n            .map(p => {\n                return <span key={p} onClick={(e) => {onPageChanged(p)}} className={currentPage === p ? `${s.select} ${s.pageNumber}` : s.pageNumber}>{p}</span>\n            })}\n        {portionCount > portionNumber && <button onClick={() => {setPortionNumber(portionNumber + 1)}}>NEXT</button>}\n    </div>\n}","import s from \"./Users.module.css\";\nimport userPhoto from \"../../assets/images/user.png\";\nimport React, {FC} from \"react\";\nimport {UserType} from \"./UsersContainer\";\nimport preloader from \"../../assets/images/Rocket.gif\"\nimport {NavLink} from \"react-router-dom\";\nimport {Paginator} from \"../common/Paginator/Paginator\";\n\ntype UsersType = {\n    totalCount: number\n    pageSize: number\n    onPageChanged: (p: number) => void\n    currentPage: number\n    users: Array<UserType>\n    follow: (id: number) => void\n    unfollow: (id: number) => void\n    isFetching: boolean\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => void\n    followingInProgress: Array<number>\n}\n\nexport const Users: FC<UsersType> = ({totalCount,pageSize, onPageChanged, currentPage, ...props}) => {\n/*\n\n    let pagesCount = Math.ceil(props.totalCount / props.pageSize)\n    let pages = []\n    for (let i = 1; i <= pagesCount; i++) {\n        pages.push(i)\n    }\n*/\n\n    return <div>\n        <div>\n            {props.isFetching && <img src={preloader}/>}\n            <Paginator totalItemsCount={totalCount} pageSize={pageSize} currentPage={currentPage} onPageChanged={onPageChanged} portionSize={10}/>\n{/*\n            {pages.map(p => {\n                return <span key={p}\n                             onClick={(e) => {props.onPageChanged(p)}}\n                             className={props.currentPage === p ? s.select : ''}>{p}</span>\n            })}\n*/}\n        </div>\n\n        <br/>\n        {\n            props.users.map(u => <div key={u.id}>\n                <span>\n                    <div>\n                        <NavLink to={'profile/' + u.id}>\n                            <img className={s.userPhoto} src={u.photos.small != null ? u.photos.small : userPhoto}/>\n                        </NavLink>\n                    </div>\n                    <div>\n                        {u.followed\n                            ? <button disabled={props.followingInProgress.some(id => id === u.id)} onClick={() => {\n                                props.unfollow(u.id)\n                            }}>Unfollow</button>\n                            : <button disabled={props.followingInProgress.some(id => id === u.id)} onClick={() => {\n                                props.follow(u.id)\n                            }}>Follow</button>}\n                    </div>\n                </span>\n                <span>\n                        <div>{u.name}</div>\n                        <div>{u.status}</div>\n                </span>\n            </div>)\n        }\n    </div>\n}","// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","import {StoreType} from \"./reduxStore\";\nimport {createSelector} from \"reselect\";\n\nexport const getUsersSelector = (state: StoreType) => {\n    return state.usersPage.users\n}\n\nexport const getUsers = createSelector(getUsersSelector, (users) => {\n    return users\n})\nexport const getPageSize = (state: StoreType) => {\n    return state.usersPage.pageSize\n}\nexport const getCurrentPage = (state: StoreType) => {\n    return state.usersPage.currentPage\n}\nexport const getTotalCount = (state: StoreType) => {\n    return state.usersPage.totalCount\n}\nexport const getIsFetching = (state: StoreType) => {\n    return state.usersPage.isFetching\n}\nexport const getFollowingInProgress = (state: StoreType) => {\n    return state.usersPage.followingInProgress\n}","import {connect} from \"react-redux\";\nimport {StoreType} from \"../../Redux/reduxStore\";\nimport {\n    follow, requestUsers,\n    InitialStateUsersType, setCurrentPage,\n    setTotalUsersCount,\n    setUsers, toggleFollowingProgress,\n    toggleIsFetching, unfollow\n} from \"../../Redux/usersReducer\";\nimport React from \"react\";\nimport {Users} from \"./Users\";\nimport {compose} from \"redux\";\nimport {\n    getCurrentPage,\n    getFollowingInProgress,\n    getIsFetching,\n    getPageSize,\n    getTotalCount,\n    getUsers\n} from \"../../Redux/usersSelectors\";\n\ntype MapDispatchPropsType = {\n    follow: (userId: number) => void\n    unfollow: (userId: number) => void\n    setUsers: (users: Array<UserType>) => void\n    setCurrentPage: (pageNumber: number) => void\n    setTotalUsersCount: (totalCount: number) => void\n    toggleIsFetching: (isFetching: boolean) => void\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => void\n    requestUsers: (currentPage: number, pageSize: number) => void\n\n}\n\nexport type UserType = {\n    name: string\n    id: number\n    uniqueUrlName: null | string\n    photos: {\n        small: null | string\n        large?: string\n    }\n    status: null | string\n    followed: boolean\n}\n\nexport type UsersType = {\n    users: Array<UserType>\n    totalCount: number\n    pageSize: number\n    currentPage: number\n    isFetching: boolean\n    followingInProgress: Array<number>\n}\n\nclass UsersContainer extends React.Component<UsersType & MapDispatchPropsType> {\n    componentDidMount() {\n        this.props.requestUsers(this.props.currentPage, this.props.pageSize)\n/*        this.props.toggleIsFetching(true)\n        usersAPI.getUsers(this.props.currentPage, this.props.pageSize).then(data => {\n            this.props.toggleIsFetching(false)\n            this.props.setUsers(data.items)\n            this.props.setTotalUsersCount(data.totalCount)\n        })*/\n    }\n\n    onPageChanged = (pageNumber: number) => {\n        this.props.requestUsers(pageNumber, this.props.pageSize)\n\n/*        this.props.toggleIsFetching(true)\n        this.props.setCurrentPage(pageNumber)\n        usersAPI.getUsers(pageNumber, this.props.pageSize).then(data => {\n            this.props.toggleIsFetching(false)\n            this.props.setUsers(data.items)\n        })*/\n    }\n\n    render() {\n\n        return <Users users={this.props.users}\n                      onPageChanged={this.onPageChanged}\n                      currentPage={this.props.currentPage}\n                      pageSize={this.props.pageSize}\n                      totalCount={this.props.totalCount}\n                      follow={this.props.follow}\n                      unfollow={this.props.unfollow}\n                      isFetching={this.props.isFetching}\n                      followingInProgress={this.props.followingInProgress}\n                      toggleFollowingProgress={this.props.toggleFollowingProgress}/>\n    }\n}\n\n/*const mapStateToProps = (state: StoreType): InitialStateUsersType => {\n    return {\n        users: state.usersPage.users,\n        pageSize: state.usersPage.pageSize,\n        currentPage: state.usersPage.currentPage,\n        totalCount: state.usersPage.totalCount,\n        isFetching: state.usersPage.isFetching,\n        followingInProgress: state.usersPage.followingInProgress\n    }\n}*/\n\n\nconst mapStateToProps = (state: StoreType): InitialStateUsersType => {\n    return {\n        users: getUsers(state),\n        pageSize: getPageSize(state),\n        currentPage: getCurrentPage(state),\n        totalCount: getTotalCount(state),\n        isFetching: getIsFetching(state),\n        followingInProgress: getFollowingInProgress(state)\n    }\n}\n\n/*\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\n    return {\n        follow: (userId) => {\n            dispatch(followAC(userId))\n        },\n        unfollow: (userId) => {\n            dispatch(unfollowAC(userId))\n        },\n        setUsers: (users) => {\n            dispatch(setUsersAC(users))\n        },\n        setCurrentPage: (pageNumber) => {\n            dispatch(setCurrentPageAC(pageNumber))\n        },\n        setTotalUsersCount: (totalCount) => {\n            dispatch(setTotalUsersCountAC(totalCount))\n        },\n        toggleIsFetching: (isFetching) => {\n            dispatch(toggleIsFetchingAC(isFetching))\n        }\n    }\n}\n*/\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {\n        follow,\n        unfollow,\n        setUsers,\n        setCurrentPage,\n        setTotalUsersCount,\n        toggleIsFetching,\n        toggleFollowingProgress,\n        requestUsers\n    }))(UsersContainer)\n"],"names":["Paginator","totalItemsCount","pageSize","currentPage","onPageChanged","portionSize","pageCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","onClick","filter","p","map","e","className","s","Users","totalCount","props","isFetching","src","preloader","users","u","to","id","photos","small","userPhoto","followed","disabled","followingInProgress","some","unfollow","follow","name","status","NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","length","createCacheKeyComparator","cache","equals","entry","get","key","value","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","Object","assign","lastResult","recomputations","resetRecomputations","getUsers","state","usersPage","getPageSize","getCurrentPage","getTotalCount","getIsFetching","getFollowingInProgress","UsersContainer","pageNumber","requestUsers","this","toggleFollowingProgress","React","compose","connect","setUsers","setCurrentPage","setTotalUsersCount","toggleIsFetching"],"sourceRoot":""}
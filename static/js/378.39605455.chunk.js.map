{"version":3,"file":"static/js/378.39605455.chunk.js","mappings":"0KACA,G,QAAA,CAAgB,QAAU,yBAAyB,aAAe,8BAA8B,WAAa,4BAA4B,SAAW,4B,mBCQvIA,EAAa,SAACC,GACvB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OAAQ,gBAAKC,UAAWC,EAAAA,OAAhB,UACJ,SAAC,KAAD,CAASC,GAAIJ,EAAMK,gBAAiBF,EAAAA,WAApC,SAAmDJ,EAAMO,UCNpDC,EAAU,SAACR,GAEpB,OACI,gBAAKG,UAAWC,EAAAA,QAAhB,SAA4BJ,EAAMS,W,uCC2BpCC,GAAcC,EAAAA,EAAAA,GAAiB,IAe/BC,GAAsBC,EAAAA,EAAAA,GAAU,CAACC,KAAM,wBAAjBD,EAbL,SAACb,GACpB,OACI,kBAAMe,SAAUf,EAAMgB,aAAtB,WACI,0BACI,SAACC,EAAA,EAAD,CAAQC,UAAWC,EAAAA,EAAUZ,KAAK,iBAAiBa,SAAU,CAACC,EAAAA,EAAUX,GAAcY,YAAY,0BAEtG,0BACI,6C,8BCchB,GAJyBC,EAAAA,EAAAA,KACrBC,EAAAA,EAAAA,KAfoB,SAACC,GACrB,MAAO,CACHC,YAAaD,EAAMC,gBAIA,SAACC,GACxB,MAAO,CACHC,gBAAiB,SAACC,GACdF,GAASG,EAAAA,EAAAA,GAA6BD,SAO9CE,EAAAA,EAFqBR,EDzCF,SAACvB,GAEpB,IAAIgC,EAAkBhC,EAAM0B,YAAYO,QAAQC,KAAI,SAAAC,GAAE,OAAI,SAACpC,EAAD,CAAwBG,GAAIiC,EAAGjC,GAAIK,KAAM4B,EAAG5B,MAA3B4B,EAAGjC,OAC1EkC,EAAmBpC,EAAM0B,YAAYW,SAASH,KAAI,SAAAC,GAAE,OAAI,SAAC3B,EAAD,CAAqBC,QAAS0B,EAAG1B,SAAnB0B,EAAGjC,OAM7E,OACI,iBAAKC,UAAWC,EAAAA,QAAhB,WACI,gBAAKD,UAAWC,EAAAA,aAAhB,SACK4B,KAEL,gBAAK7B,UAAWC,EAAAA,SAAhB,UACI,yBAAMgC,OAEV,SAACxB,EAAD,CAAqBG,SAZP,SAACuB,GACnBtC,EAAM4B,gBAAgBU,EAAOT,0B,wKEZ/BU,EAA0B,SAACd,GAAD,MAAoD,CAChFe,OAAQf,EAAMgB,KAAKD,SAGhB,SAAST,EAAoBW,GAA8B,IACxDC,EADuD,0IAEzD,WACI,MAA6BC,KAAK5C,MAA7BwC,EAAL,EAAKA,OAAWK,GAAhB,YACA,OAAKL,GACE,SAACE,GAAD,UAAeG,KADF,SAAC,KAAD,CAAUxC,GAAI,eAJmB,GAC7ByC,EAAAA,WAShC,OADqCtB,EAAAA,EAAAA,IAAQe,EAARf,CAAiCmB","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Messages/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__oe96H\",\"dialogsItems\":\"Dialogs_dialogsItems__zeEWD\",\"activeLink\":\"Dialogs_activeLink__mpzNi\",\"messages\":\"Dialogs_messages__Cg2l+\"};","import React from \"react\";\nimport {NavLink} from \"react-router-dom\";\nimport s from \"./../Dialogs.module.css\"\n\ntype DialogItemType = {\n    id: number\n    name: string\n}\n\nexport const DialogItem = (props: DialogItemType) => {\n    let path = \"/dialogs/\" + props.id;\n\n    return (<div className={s.dialog}>\n        <NavLink to={path} activeClassName={s.activeLink}>{props.name}</NavLink>\n    </div>);\n}\n\n","import React from \"react\";\nimport s from \"./../Dialogs.module.css\";\n\ntype MessageType = {\n    message: string\n}\n\nexport const Message = (props: MessageType) => {\n\n    return (\n        <div className={s.message}>{props.message}</div>\n    );\n}\n\n","import React from \"react\";\nimport s from \"./Dialogs.module.css\"\nimport {DialogItem} from \"./DialogItem/DialogItem\";\nimport {Message} from \"./Messages/Message\";\nimport {Field, reduxForm} from \"redux-form\";\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\nimport {maxLengthCreator, required} from \"../../Validators/validators\";\nimport {DialogsPageType} from \"../../Redux/dialogsReducer\";\n\nexport type DialogsPropsType = {\n    updateNewMessageBody: (value: string) => void\n    sendMessageBody: (values: any) => void\n    dialogsPage: DialogsPageType\n}\n\nexport const Dialogs = (props: DialogsPropsType) => {\n\n    let dialogsElements = props.dialogsPage.dialogs.map(el => <DialogItem key={el.id} id={el.id} name={el.name}/>)\n    let messagesElements = props.dialogsPage.messages.map(el => <Message key={el.id} message={el.message}/>)\n\n    const addNewMessage = (values: any) => {\n        props.sendMessageBody(values.newMessageBody)\n    }\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                <div>{messagesElements}</div>\n            </div>\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\n        </div>\n    )\n}\n\nconst maxLength50 = maxLengthCreator(50)\n\nconst AddMessageForm = (props: {handleSubmit: any}) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field  component={Textarea} name=\"newMessageBody\" validate={[required, maxLength50]} placeholder=\"Enter your message\"/>\n            </div>\n            <div>\n                <button>Send</button>\n            </div>\n        </form>\n    )\n}\n\nconst AddMessageFormRedux = reduxForm({form: \"dialogAddMessageForm\"})(AddMessageForm)","import React from \"react\";\nimport {\n    InitialStateDialogsType,\n    sendMessageBodyActionCreator} from \"../../Redux/dialogsReducer\";\nimport {Dialogs} from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {compose, Dispatch} from \"redux\";\nimport {StoreType} from \"../../Redux/reduxStore\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\n\n/*export const DialogsContainer = () => {\n\n    return (\n        <StoreContext.Consumer>\n            {\n                (store) => {\n\n                    const onSendMessageBody = () => {\n                        store.dispatch(sendMessageBodyActionCreator())\n                    }\n\n                    const onNewMessageChange = (value: string) => {\n                        store.dispatch(updateNewMessageBodyActionCreator(value))\n                    }\n\n                    return <Dialogs updateNewMessageBody={onNewMessageChange}\n                                    sendMessageBody={onSendMessageBody}\n                                    dialogsPage={store.getState().dialogsPage}/>\n                }\n            }\n        </StoreContext.Consumer>\n    )\n}*/\n\ntype MapStatePropsType = {\n    dialogsPage: InitialStateDialogsType\n}\n\ntype MapDispatchPropsType = {\n    sendMessageBody: (newMessageBody: string) => void\n}\n\nconst mapStateToProps = (state: StoreType): MapStatePropsType => {\n    return {\n        dialogsPage: state.dialogsPage\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\n    return {\n        sendMessageBody: (newMessageBody: string) => {\n            dispatch(sendMessageBodyActionCreator(newMessageBody))\n        }\n    }\n}\n\nconst DialogsContainer = compose<React.ComponentType>(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(Dialogs)\nexport default DialogsContainer","import {StoreType} from \"../Redux/reduxStore\";\nimport React, {ComponentType} from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\n\ntype MapStateToPropsRedirectType = {\n    isAuth: boolean\n}\n\nconst mapStateToPropsRedirect = (state: StoreType): MapStateToPropsRedirectType => ({\n    isAuth: state.auth.isAuth\n})\n\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\n    class RedirectComponent extends React.Component<MapStateToPropsRedirectType> {\n        render() {\n            let {isAuth, ...restProps} = this.props\n            if (!isAuth) return <Redirect to={'/login'}/>\n            return <Component {...restProps as T}/>\n        }\n    }\n\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsRedirect)(RedirectComponent)\n    return ConnectedAuthRedirectComponent\n}"],"names":["DialogItem","props","path","id","className","s","to","activeClassName","name","Message","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","compose","connect","state","dialogsPage","dispatch","sendMessageBody","newMessageBody","sendMessageBodyActionCreator","withAuthRedirect","dialogsElements","dialogs","map","el","messagesElements","messages","values","mapStateToPropsRedirect","isAuth","auth","Component","RedirectComponent","this","restProps","React"],"sourceRoot":""}
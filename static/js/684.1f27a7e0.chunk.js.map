{"version":3,"file":"static/js/684.1f27a7e0.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/Profile.module.css?b512","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Posts/Post.tsx","components/Profile/Posts/MyPosts.tsx","components/Profile/Posts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Profile_content__g-Lde\",\"avatar\":\"Profile_avatar__NzF5E\",\"ava\":\"Profile_ava__M5bEO\",\"imageLike\":\"Profile_imageLike__R754K\",\"likeDislike\":\"Profile_likeDislike__ZgUnB\",\"mainPhoto\":\"Profile_mainPhoto__WIoKW\"};","import React, {ChangeEvent, FC, useEffect, useState} from \"react\";\n\ntype ProfileStatusType = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\nexport const ProfileStatusWithHooks: FC<ProfileStatusType> = (props) => {\n\n    const [editMode, setEditMode] = useState(false)\n    const [status, setStatus] = useState(props.status)\n\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props])\n\n    const activateEditMode = () => {\n        setEditMode(true)\n    }\n    const deactivateEditMode = () => {\n        setEditMode(false)\n        props.updateStatus(status)\n    }\n    const onChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value)\n    }\n\n    return (\n        <div>\n            {!editMode &&\n                <div>\n                    <span onDoubleClick={activateEditMode}>{props.status || \"------\"}</span>\n                </div>\n            }\n            {editMode &&\n                <div>\n                    <input onChange={onChangeStatus} onBlur={deactivateEditMode} autoFocus value={status}/>\n                </div>\n            }\n        </div>\n    )\n}\n\n","import React from \"react\";\nimport preloader from \"../../../assets/images/Rocket.gif\"\nimport {ProfileType} from \"../ProfileContainer\";\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\nimport userPhoto from \"../../../assets/images/user.png\";\nimport s from \"../Profile.module.css\"\n\ntype ProfileInfoType = {\n    profile: ProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (file: any) => void\n}\n\nexport const ProfileInfo = (props: ProfileInfoType) => {\n    const onMainPhotoSelected = (e: any) => {\n        if (e.target.files.length) {\n            props.savePhoto(e.target.files[0])\n        }\n    }\n\n    if (!props.profile) {\n        return <img src={preloader}/>\n    }\n    return (\n        <div>\n            <div>\n                <img className={s.mainPhoto} src={props.profile.photos.large || userPhoto}/>\n                {props.isOwner && <input type=\"file\" onChange={onMainPhotoSelected}/>}\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\n            </div>\n        </div>\n    )\n}","import s from \"../Profile.module.css\";\nimport React from \"react\";\n\nexport type PostType = {\n    id?: number\n    imageAddress: string\n    text: string\n    like: number\n    dislike: number\n}\n\nexport const Post = (props: PostType) => {\n    return (\n        <div className={s.item}>\n            <img className={s.ava} src={props.imageAddress}/>\n            <i>{props.text}</i>\n            <div className={s.likeDislike}>\n                <img className={s.imageLike} src=\"https://cdn-icons-png.flaticon.com/128/126/126473.png\"/>\n                {props.like}\n            </div>\n            <div className={s.likeDislike}>\n                <img className={s.imageLike} src=\"https://cdn-icons-png.flaticon.com/128/126/126504.png\"/>\n                {props.dislike}\n            </div>\n        </div>\n    )\n}","import React from \"react\";\nimport s from \"../Profile.module.css\";\nimport {Post, PostType} from \"./Post\";\nimport {Field, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../Validators/validators\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\n\nexport type MyPostsType = {\n    posts: Array<PostType>\n    addPost: (value: any) => void\n}\n\nconst maxLength10 = maxLengthCreator(10)\n\n\nlet AddNewPostForm = React.memo((props: { handleSubmit: any }) => {\n    return <form onSubmit={props.handleSubmit}>\n        <div>\n            New Post\n            <Field name=\"newPostText\" component={Textarea} validate={[required, maxLength10]}/>\n        </div>\n        <div>\n            <button>send</button>\n        </div>\n    </form>\n})\n\nlet AddNewPostFormRedux = reduxForm({form: \"ProfileAddMewPostForm\"})(AddNewPostForm)\n\nexport const MyPosts = React.memo((props: MyPostsType) => {\n    console.log('MyPost')\n    const postsElements = props.posts.map(el => <Post key={el.id} imageAddress={el.imageAddress} text={el.text} dislike={el.dislike} like={el.like}/>)\n\n    const onAddPost = (value: any) => {\n        props.addPost(value.newPostText)\n    }\n\n    return (\n        <div>\n            My posts\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\n            <div className={s.posts}>\n                {postsElements}\n            </div>\n        </div>\n    )\n})","import React from \"react\";\nimport {\n    addPostActionCreator, InitialStateProfileType} from \"../../../Redux/profileReducer\";\nimport {MyPosts} from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {Dispatch} from \"redux\";\nimport {StoreType} from \"../../../Redux/reduxStore\";\n\n/*\nexport const MyPostsContainer = () => {\n\n    return (\n        <StoreContext.Consumer>\n            {\n            (store) => {\n\n                const addPost = () => {\n                    store.dispatch(addPostActionCreator())\n                }\n\n                const onChangeHandler = (value: string) => {\n                    store.dispatch(updateNewPostActionCreator(value))\n                }\n\n                return <MyPosts updateNewPostText={onChangeHandler}\n                                addPost={addPost}\n                                posts={store.getState().profilePage.posts}\n                                newPostText={store.getState().profilePage.newPostText}/>\n            }\n        }\n        </StoreContext.Consumer>\n    )\n}\n*/\n\ntype MapDispatchPropsType = {\n    addPost: (newPostText: string) => void\n}\n\nconst mapStateToProps = (state: StoreType): InitialStateProfileType => {\n    return {\n        posts: state.profilePage.posts,\n        profile: state.profilePage.profile,\n        status: state.profilePage.status\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\n    return {\n        addPost: (newPostText: string) => {\n            dispatch(addPostActionCreator(newPostText))\n        }\n    }\n}\n\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\n","import React from 'react';\nimport s from \"./Profile.module.css\"\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\nimport {MyPostsContainer} from \"./Posts/MyPostsContainer\";\nimport {ProfileType} from \"./ProfileContainer\";\n\ntype ProfilePropsType = {\n    profile: ProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (file: any) => void\n}\n\nexport const Profile = (props: ProfilePropsType) => {\n    return (\n        <div className={s.content}>\n            <ProfileInfo isOwner={props.isOwner} savePhoto={props.savePhoto} profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\n            <MyPostsContainer/>\n        </div>\n    )\n}\n","import React from 'react';\nimport {Profile} from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {StoreType} from \"../../Redux/reduxStore\";\nimport {getStatus, getUserProfile, savePhoto, updateStatus} from \"../../Redux/profileReducer\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\nexport type ProfileType = {\n    aboutMe: string\n    userId: number\n    lookingForAJob: boolean\n    lookingForAJobDescription: string\n    fullName: string\n    contacts: {\n        github: string\n        vk: string\n        facebook: string\n        instagram: string\n        twitter: string\n        website: string\n        youtube: string\n        mainLink: string\n    }\n    photos: {\n        small: string\n        large: string\n    }\n}\n\ntype MapStateToPropsType = {\n    profile: ProfileType | null\n    status: string\n    authorizedUserId: undefined | string\n    isAuth: boolean\n}\n\ntype MapDispatchToPropsType = {\n    getUserProfile: (userId: undefined | string) => void\n    getStatus: (userId: undefined | string) => void\n    updateStatus: (status: string) => void\n    savePhoto: (file: any) => void\n}\n\ntype PathParamsType = {\n    userId: string | undefined\n}\n\ntype ProfileContainerType = RouteComponentProps<PathParamsType> & MapStateToPropsType & MapDispatchToPropsType\n\n\nclass ProfileContainer extends React.Component<ProfileContainerType> {\n    refreshProfile() {\n        let userId = this.props.match.params.userId\n        if (!userId) {\n            userId = this.props.authorizedUserId\n        }\n        this.props.getUserProfile(userId)\n        this.props.getStatus(userId)\n    }\n\n    componentDidMount() {\n        this.refreshProfile()\n    }\n\n    componentDidUpdate(prevProps: Readonly<ProfileContainerType>, prevState: Readonly<{}>, snapshot?: any) {\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\n            this.refreshProfile()\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <Profile isOwner={!this.props.match.params.userId} savePhoto={this.props.savePhoto} profile={this.props.profile} status={this.props.status}\n                         updateStatus={this.props.updateStatus}/>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state: StoreType): MapStateToPropsType => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth\n})\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto}),\n    withRouter,\n    withAuthRedirect\n)(ProfileContainer)","import {StoreType} from \"../Redux/reduxStore\";\nimport React, {ComponentType} from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\n\ntype MapStateToPropsRedirectType = {\n    isAuth: boolean\n}\n\nconst mapStateToPropsRedirect = (state: StoreType): MapStateToPropsRedirectType => ({\n    isAuth: state.auth.isAuth\n})\n\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\n    class RedirectComponent extends React.Component<MapStateToPropsRedirectType> {\n        render() {\n            let {isAuth, ...restProps} = this.props\n            if (!isAuth) return <Redirect to={'/login'}/>\n            return <Component {...restProps as T}/>\n        }\n    }\n\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsRedirect)(RedirectComponent)\n    return ConnectedAuthRedirectComponent\n}"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","ProfileInfo","profile","className","s","src","photos","large","userPhoto","isOwner","type","target","files","length","savePhoto","preloader","Post","imageAddress","text","like","dislike","maxLength10","maxLengthCreator","AddNewPostForm","React","onSubmit","handleSubmit","Field","name","component","Textarea","validate","required","AddNewPostFormRedux","reduxForm","form","MyPosts","console","log","postsElements","posts","map","el","id","addPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","compose","auth","isAuth","withRouter","withAuthRedirect","mapStateToPropsRedirect","Component","RedirectComponent","restProps","to"],"sourceRoot":""}